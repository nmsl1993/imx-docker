#!/bin/bash
#
# This script runs the image generated by the docker build script
# using docker run command, where:
#   --rm  automatically removes the container and on exit
#   -i  keeps the standard input open
#   -t  provides a terminal as a interactive shell within container
#   --volumes  are file systems mounted on docker container to preserve
# data generated during the yocto build and these are stored on the host.
# Left side being an absolute path on the host machine, right side being
# an absolute path inside the container.
#
#   $ ./docker-run.sh
#

# source the common variables
. ./env.sh
echo "\$HOME: $HOME"
echo "\$DOCKER_WORKDIR: $DOCKER_WORKDIR"
echo "\$IMX_RELEASE: $IMX_RELEASE"
echo "\$DOCKER_IMAGE_TAG: $DOCKER_IMAGE_TAG"
# run the docker image

if [ -n "$1" ]; then
    echo "Running with argument: $1"
    docker run -it --rm \
    --volume ${HOME}:${HOME} \
    --volume ${DOCKER_WORKDIR}:${DOCKER_WORKDIR} \
    --volume $(pwd)/${IMX_RELEASE}:${DOCKER_WORKDIR}/${IMX_RELEASE} \
    "${DOCKER_IMAGE_TAG}" \
    $1
else
    docker run -it --rm \
    --volume ${HOME}:${HOME} \
    --volume ${DOCKER_WORKDIR}:${DOCKER_WORKDIR} \
    --volume $(pwd)/${IMX_RELEASE}:${DOCKER_WORKDIR}/${IMX_RELEASE} \
    "${DOCKER_IMAGE_TAG}" /bin/bash -c '
        set -e # exit on error inside the container
        cd ${DOCKER_WORKDIR}/${IMX_RELEASE}
        source yocto-build.sh
        #cd ${DOCKER_WORKDIR}/imx-yocto-bsp

    '
fi


