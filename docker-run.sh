#!/bin/bash
#
# This script runs the image generated by the docker build script
# using docker run command, where:
#   --rm  automatically removes the container and on exit
#   -i  keeps the standard input open
#   -t  provides a terminal as a interactive shell within container
#   --volumes  are file systems mounted on docker container to preserve
# data generated during the yocto build and these are stored on the host.
# Left side being an absolute path on the host machine, right side being
# an absolute path inside the container.
#
#   $ ./docker-run.sh
#

# source the common variables
. ./env.sh

# run the docker image
#sudo mkdir -p ${DOCKER_WORKDIR}
#sudo chmod -R a+rw ${DOCKER_WORKDIR}

if [ "$1" == "build" ]; then
    docker run -it --rm \
    --volume ${HOME}:${HOME} \
    --volume $(pwd)/${IMX_RELEASE}:${DOCKER_WORKDIR}/${IMX_RELEASE} \
    --volume $(pwd)/meta-ninefives:${DOCKER_WORKDIR}/meta-ninefives \
    "${DOCKER_IMAGE_TAG}" /bin/bash -c '
        set -e # exit on error inside the container
        echo '${DOCKER_WORKDIR}'
     
        # Disable repo color prompts[]
        git config --global color.ui false
        ls -ltrah '${DOCKER_WORKDIR}/${IMX_RELEASE}'
        cd '${DOCKER_WORKDIR}/${IMX_RELEASE}'
        echo "\$MACHINE: '${MACHINE}'"
        echo "\$IMAGES: '${IMAGES}'"
        EULA=1 MACHINE='${MACHINE}' DISTRO='${DISTRO}' source imx-setup-release.sh -b build_'${DISTRO}'
        # Add meta-ninefives layer to bblayers.conf if not already present
        if ! grep -q "meta-ninefives" conf/bblayers.conf; then
            echo BBLAYERS += \"\$\{BSPDIR\}/sources/meta-ninefives\" >> conf/bblayers.conf
            echo "Added meta-ninefives layer to bblayers.conf"
        fi
        bitbake '${IMAGES}'
    '
elif [ "$1" == "deploy_build" ]; then
    docker run -it --rm \
    --volume ${HOME}:${HOME} \
    --volume $(pwd)/${IMX_RELEASE}:${DOCKER_WORKDIR}/${IMX_RELEASE} \
    --volume $(pwd)/meta-ninefives:${DOCKER_WORKDIR}/meta-ninefives \
    "${DOCKER_IMAGE_TAG}" /bin/bash -c '
        set -e # exit on error inside the container
        echo '${DOCKER_WORKDIR}'
     
        # Disable repo color prompts[]
        git config --global color.ui false
        ls -ltrah '${DOCKER_WORKDIR}/${IMX_RELEASE}'
        cd '${DOCKER_WORKDIR}/${IMX_RELEASE}'
        echo "\$MACHINE: '${MACHINE}'"
        echo "\$IMAGES: '${IMAGES}'"
        EULA=1 MACHINE='${MACHINE}' DISTRO='${DISTRO}' source imx-setup-release.sh -b build_'${DISTRO}'
        # Add meta-ninefives layer to bblayers.conf if not already present
        if ! grep -q "meta-ninefives" conf/bblayers.conf; then
            echo BBLAYERS += \"\$\{BSPDIR\}/sources/meta-ninefives\" >> conf/bblayers.conf
            echo "Added meta-ninefives layer to bblayers.conf"
        fi
        bitbake '${IMAGES} -c deploy'
    '

elif [ "$1" == "clean" ]; then
    docker run -it --rm \
    --volume ${HOME}:${HOME} \
    --volume $(pwd)/${IMX_RELEASE}:${DOCKER_WORKDIR}/${IMX_RELEASE} \
    --volume $(pwd)/meta-ninefives:${DOCKER_WORKDIR}/meta-ninefives \
    "${DOCKER_IMAGE_TAG}" /bin/bash -c '
        set -e # exit on error inside the container
        echo '${DOCKER_WORKDIR}'
     
        # Disable repo color prompts[]
        git config --global color.ui false
        ls -ltrah '${DOCKER_WORKDIR}/${IMX_RELEASE}'
        cd '${DOCKER_WORKDIR}/${IMX_RELEASE}'
        echo "\$MACHINE: '${MACHINE}'"
        echo "\$IMAGES: '${IMAGES}'"
        EULA=1 MACHINE='${MACHINE}' DISTRO='${DISTRO}' source imx-setup-release.sh -b build_'${DISTRO}'
        # Add meta-ninefives layer to bblayers.conf if not already present
        if ! grep -q "meta-ninefives" conf/bblayers.conf; then
            echo BBLAYERS += \"\$\{BSPDIR\}/sources/meta-ninefives\" >> conf/bblayers.conf
            echo "Added meta-ninefives layer to bblayers.conf"
        fi
        bitbake '${IMAGES} -c clean'
    '
elif [ "$1" == "sync" ]; then
    echo "Running with argument: $1"
    docker run -it --rm \
    --volume ${HOME}:${HOME} \
    --volume $(pwd)/${IMX_RELEASE}:${DOCKER_WORKDIR}/${IMX_RELEASE} \
    --volume $(pwd)/meta-ninefives:${DOCKER_WORKDIR}/meta-ninefives \
    "${DOCKER_IMAGE_TAG}" /bin/bash -c '
        set -e # exit on error inside the container
        echo '${DOCKER_WORKDIR}'

        # Disable repo color prompts[]
        git config --global color.ui false
        ls -ltrah '${DOCKER_WORKDIR}/${IMX_RELEASE}'
        cd '${DOCKER_WORKDIR}/${IMX_RELEASE}'
        repo init -u https://github.com/nxp-imx/imx-manifest -b '${BRANCH}' -m '${IMX_RELEASE}'.xml
        repo sync -j`nproc`

        # Add meta-ninefives layer to sources directory
        if [ ! -L sources/meta-ninefives ]; then
            ln -sf ../../meta-ninefives sources/meta-ninefives
        fi
        # 
    '
elif [ "$1" == "interactive" ]; then
    echo "Running with argument: $1"
    docker run -it --rm \
    --volume ${HOME}:${HOME} \
    --volume $(pwd)/${IMX_RELEASE}:${DOCKER_WORKDIR}/${IMX_RELEASE} \
    --volume $(pwd)/meta-ninefives:${DOCKER_WORKDIR}/meta-ninefives \
    "${DOCKER_IMAGE_TAG}" /bin/bash -c '
        echo "\$MACHINE: '${MACHINE}'"
        echo "\$IMAGES: '${IMAGES}'"
        cd '${DOCKER_WORKDIR}/${IMX_RELEASE}'
        EULA=1 MACHINE='${MACHINE}' DISTRO='${DISTRO}' source imx-setup-release.sh -b build_'${DISTRO}'
        # Add meta-ninefives layer to bblayers.conf if not already present
        if ! grep -q "meta-ninefives" conf/bblayers.conf; then
            echo BBLAYERS += \"\$\{BSPDIR\}/sources/meta-ninefives\" >> conf/bblayers.conf
            echo "Added meta-ninefives layer to bblayers.conf"
        fi
        echo "Setup complete. Dropping into interactive shell..."
        exec /bin/bash -i
    '
else
    echo "Error: No argument supplied."
    exit 1
fi


